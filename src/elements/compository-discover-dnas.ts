import { membraneContext } from '@holochain-open-dev/membrane-context';
import { LitElement, Constructor, css, html, property } from 'lit-element';
import { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';
import {
  CompositoryInstallDnaDialog,
  CompositoryService,
  Dictionary,
  DnaTemplate,
  generateDnaFile,
  GetTemplateForDnaOutput,
} from '@compository/lib';
import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';
import { sharedStyles } from './sharedStyles';
import { Card } from 'scoped-material-components/mwc-card';
import { List } from 'scoped-material-components/mwc-list';
import { ListItem } from 'scoped-material-components/mwc-list-item';
import { serializeHash } from '@holochain-open-dev/common';
import { CircularProgress } from 'scoped-material-components/mwc-circular-progress';
import { Button } from 'scoped-material-components/mwc-button';

export class DiscoverDnas extends membraneContext(
  Scoped(LitElement) as Constructor<LitElement>
) {
  @property({ type: Boolean })
  _loading = true;

  @property({ type: Array })
  _allInstantiatedDnasHashes: Array<string> | undefined = undefined;
  // {[instantiated_dna_hash]: DnaTemplate}
  @property({ type: Array })
  _dnaTemplates: Dictionary<GetTemplateForDnaOutput> = {};

  get _compositoryService() {
    return new CompositoryService(
      this.membraneContext.appWebsocket as AppWebsocket,
      this.membraneContext.cellId as CellId
    );
  }

  async firstUpdated() {
    const cellIds = await (this.membraneContext
      .adminWebsocket as AdminWebsocket).listCellIds();
    const allInstalledDnaHashes = cellIds.map(cellId =>
      serializeHash(cellId[0])
    );
    const allInstantiatedDnas = await this._compositoryService.getAllInstantiatedDnas();
    this._allInstantiatedDnasHashes = allInstantiatedDnas.filter(
      hash => !allInstalledDnaHashes.includes(hash)
    );

    const promises = this._allInstantiatedDnasHashes.map(async hash => {
      const template = await this._compositoryService.getTemplateForDna(hash);
      return [hash, template] as [string, GetTemplateForDnaOutput];
    });

    const templateArray = await Promise.all(promises);

    for (const [hash, template] of templateArray) {
      this._dnaTemplates[hash] = template;
    }

    this._loading = false;
  }
  async displayInstallDna(dnaHash: string, retriesLeft: number = 3) {
    this._loading = true;

    if (retriesLeft === 0) {
      this._loading = false;
      return;
    }

    try {
      const template = this._dnaTemplates[dnaHash];

      const dnaFile = await generateDnaFile(
        this._compositoryService,
        template.dnaTemplate,
        template.properties,
        template.uuid
      );

      const dialog: CompositoryInstallDnaDialog = this.shadowRoot?.getElementById(
        'install-dialog'
      ) as CompositoryInstallDnaDialog;
      dialog.dnaFile = dnaFile;
      dialog.open();
    } catch (e) {
      console.log(e);

      this.displayInstallDna(dnaHash, retriesLeft - 1);
    }
  }

  renderContent() {
    return html` <mwc-card class="fill">
      <div style="margin: 16px;" class="column fill">
        <span class="title">Discover DNAs</span>

        ${this._allInstantiatedDnasHashes?.length === 0
          ? html`
              <div class="fill column center-content">
                <span class="placeholder" style="max-width: 400px;"
                  >There are no DNAs generated by other agents that you don't
                  have installed</span
                >
              </div>
            `
          : html`
              <mwc-list>
                ${this._allInstantiatedDnasHashes?.map(
                  hash =>
                    html`
                      <div class="row" style="align-items: center;">
                        <mwc-list-item twoline style="flex: 1;">
                          <span
                            >${this._dnaTemplates[hash].dnaTemplate.name}</span
                          >
                          <span slot="secondary">${hash}</span>
                        </mwc-list-item>
                        <mwc-button
                          label="INSTALL"
                          raised
                          @click=${() => this.displayInstallDna(hash)}
                          style="margin-right: 16px;"
                        ></mwc-button>
                      </div>
                    `
                )}
              </mwc-list>
            `}
      </div>
    </mwc-card>`;
  }

  render() {
    return html`
      <compository-install-dna-dialog
        id="install-dialog"
      ></compository-install-dna-dialog>
      ${this._loading
        ? html`<div class="fill center-content">
            <mwc-circular-progress indeterminate></mwc-circular-progress>
          </div>`
        : this.renderContent()}
    `;
  }

  static get styles() {
    return [
      sharedStyles,
      css`
        :host {
          display: flex;
        }
      `,
    ];
  }

  static get scopedElements() {
    return {
      'mwc-card': Card,
      'mwc-button': Button,
      'mwc-list': List,
      'mwc-circular-progress': CircularProgress,
      'mwc-list-item': ListItem,
      'compository-install-dna-dialog': CompositoryInstallDnaDialog,
    };
  }
}
